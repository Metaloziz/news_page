{"version":3,"file":"static/js/755.60350101.chunk.js","mappings":"sKACA,EAA4B,qCAA5B,EAAwE,gCAAxE,EAAiH,kCAAjH,EAA0J,gCAA1J,EAAsM,qC,UCAtM,EAA4B,2B,mBCUfA,EAAgC,SAAC,GAAD,QAC3CC,QAAWC,EADgC,EAChCA,GAAIC,EAD4B,EAC5BA,KACfC,EAF2C,EAE3CA,cAF2C,OAI3C,0BACE,iBAAKC,UAAWC,EAAhB,WACE,0BACE,4BACGJ,EADH,MACUC,QAGZ,SAAC,KAAD,CACEI,WAAWC,EAAAA,EAAAA,GAAmBN,GAC9BC,KAAK,6CACLM,QAAS,kBAAML,EAAcF,Y,oBCxBrC,EAA4B,kC,UCcfQ,EAA2C,SAAC,GAIlD,IAAD,EAHJC,EAGI,EAHJA,eACAC,EAEI,EAFJA,KACAC,EACI,EADJA,SAEA,GAIIC,EAAAA,EAAAA,IAAqB,CAAEF,KAAM,aAH/BG,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAOTE,EACK,SAATP,GACE,4BACE,kBAAOQ,QAAQ,UAAf,8CACA,mCAAQlB,GAAG,UAAUmB,aAAc,GAAON,EAAS,OAAnD,oBACGF,QADH,IACGA,OADH,EACGA,EAAUS,KAAI,gBAAGpB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACb,mBAAiBoB,MAAOrB,EAAxB,SACGC,GADUD,YAMjB,KAEN,OACE,kBAAMsB,SAAUR,GAnB2B,SAAAS,GAC3Cd,GAAe,kBAAKc,GAAN,IAAYvB,GAAIwB,OAAOD,EAAKvB,UAkBFG,UAAWC,EAAnD,WACE,4BACE,wFACA,oCACMS,EAAS,OAAQ,CACnBY,UAAW,CAAEJ,MAAO,GAAIK,QAAS,wGACjCC,UAAW,CAAEN,MAAO,EAAGK,QAAS,2FAChCE,SAAU,CAAEP,OAAO,EAAMK,QAAS,wGAJtC,IAMEG,YAAY,yBAEd,iCAAId,EAAOd,YAAX,aAAI,EAAayB,aAElBT,GACD,SAACa,EAAA,EAAD,CAAQ7B,KAAK,yDAAY8B,KAAK,e,4DCcpC,EAxD8B,WAC5B,IAAMC,GAAWC,EAAAA,EAAAA,KAEXtB,GAAWuB,EAAAA,EAAAA,IAAYC,EAAAA,GAEvBC,GAAcC,EAAAA,EAAAA,cAAY,SAACtC,GAC/BiC,GAASM,EAAAA,EAAAA,IAAevC,EAAQE,SAC/B,IAEGsC,GAAgBF,EAAAA,EAAAA,cAAY,SAACtC,IAC7BO,EAAAA,EAAAA,IAAmBP,EAAQC,IAC7BgC,GAASQ,EAAAA,EAAAA,IAAgBzC,IAG3BiC,GAASS,EAAAA,EAAAA,IAAeC,EAAAA,GAAAA,oBACvB,IAEGxC,GAAgBmC,EAAAA,EAAAA,cAAY,SAACM,IAC7BrC,EAAAA,EAAAA,IAAmBqC,GACrBX,GAASY,EAAAA,EAAAA,IAAgBD,IAG3BX,GAASS,EAAAA,EAAAA,IAAeC,EAAAA,GAAAA,oBACvB,IAEGG,EAAclC,EAASS,KAAI,SAAArB,GAAO,OACtC,SAACD,EAAD,CAA0BC,QAASA,EAASG,cAAeA,GAA7CH,EAAQC,OAGxB,OACE,iBAAKG,UAAWC,EAAhB,WACE,SAAC,KAAD,CAAkB0C,WAAW,0DAAaC,KAAMC,EAAAA,GAAAA,QAEhD,iBAAK7C,UAAWC,EAAhB,WACE,iBAAKD,UAAWC,EAAhB,WACE,8IACA,SAACI,EAAD,CAAgBE,KAAK,MAAMD,eAAgB2B,QAG7C,iBAAKjC,UAAWC,EAAhB,WACE,sKACA,SAACI,EAAD,CACEE,KAAK,OACLD,eAAgB8B,EAChB5B,SAAUA,WAKhB,iBAAKR,UAAWC,EAAhB,WACE,6IACA,gBAAKD,UAAWC,EAAhB,SAAkCyC","sources":["webpack://itec/./src/pages/CreateSectionPage/CreateSectionPage.module.scss?b6f5","webpack://itec/./src/pages/CreateSectionPage/Section/Section.module.scss?74ad","pages/CreateSectionPage/Section/Section.tsx","webpack://itec/./src/pages/CreateSectionPage/SectionForm/NewSectionForm.module.scss?9de8","pages/CreateSectionPage/SectionForm/NewSectionForm.tsx","pages/CreateSectionPage/CreateSectionPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"CreateSectionPage_container__Ja1jE\",\"body\":\"CreateSectionPage_body__fKRPR\",\"create\":\"CreateSectionPage_create__rOdu+\",\"list\":\"CreateSectionPage_list__+d+cy\",\"listItems\":\"CreateSectionPage_listItems__2O2Me\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Section_container__fIM6B\"};","import { FC } from 'react'\n\nimport { DeleteButton } from 'components'\nimport style from 'pages/CreateSectionPage/Section/Section.module.scss'\nimport { SectionType } from 'store/types'\nimport { isProtectedSection } from 'utils/is_protected_section'\n\ntype SectionPropsType = {\n  section: SectionType\n  deleteSection: (id: number) => void\n}\nexport const Section: FC<SectionPropsType> = ({\n  section: { id, name },\n  deleteSection,\n}) => (\n  <div>\n    <div className={style.container}>\n      <div>\n        <span>\n          {id} - {name}\n        </span>\n      </div>\n      <DeleteButton\n        disabled={!isProtectedSection(id)}\n        name=\"удалить\"\n        onClick={() => deleteSection(id)}\n      />\n    </div>\n  </div>\n)\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"NewSectionForm_container__-25pd\"};","import { FC } from 'react'\n\nimport { SubmitHandler, useForm } from 'react-hook-form'\n\nimport style from './NewSectionForm.module.scss'\n\nimport { Button } from 'components/commonComponents/Button/Button'\nimport { SectionType } from 'store/types/section_type'\n\ntype SectionFormPropsType = {\n  setSectionData: (data: SectionType) => void\n  mode: 'add' | 'edit'\n  sections?: SectionType[]\n}\n\nexport const NewSectionForm: FC<SectionFormPropsType> = ({\n  setSectionData,\n  mode,\n  sections,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<SectionType>({ mode: 'onChange' })\n\n  const onSubmit: SubmitHandler<SectionType> = data => {\n    setSectionData({ ...data, id: Number(data.id) })\n  }\n\n  const select =\n    mode === 'edit' ? (\n      <div>\n        <label htmlFor=\"section\">Cекция</label>\n        <select id=\"section\" defaultValue={1} {...register('id')}>\n          {sections?.map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </select>\n      </div>\n    ) : null\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={style.container}>\n      <div>\n        <label>Имя секции</label>\n        <input\n          {...register('name', {\n            maxLength: { value: 15, message: '15 символов максимум' },\n            minLength: { value: 3, message: '3 символа минимум' },\n            required: { value: true, message: 'обязательное поле' },\n          })}\n          placeholder=\"имя\"\n        />\n        <p>{errors.name?.message}</p>\n      </div>\n      {select}\n      <Button name=\"отправить\" type=\"submit\" />\n    </form>\n  )\n}\n","import { FC, useCallback } from 'react'\n\nimport { useSelector } from 'react-redux'\n\nimport style from './CreateSectionPage.module.scss'\nimport { Section } from './Section/Section'\nimport { NewSectionForm } from './SectionForm/NewSectionForm'\n\nimport { NavLinkComponent } from 'components'\nimport { Error, Path } from 'enums/enums'\nimport { setErrorTrueAC } from 'store/reducers'\nimport { selectSections } from 'store/selectors'\nimport { useAppDispatch } from 'store/store'\nimport { changeSectionTC, deleteSectionTC, postSectionsTC } from 'store/thunks'\nimport { SectionType } from 'store/types'\nimport { isProtectedSection } from 'utils'\n\nconst CreateSectionPage: FC = () => {\n  const dispatch = useAppDispatch()\n\n  const sections = useSelector(selectSections)\n\n  const postSection = useCallback((section: SectionType): void => {\n    dispatch(postSectionsTC(section.name))\n  }, [])\n\n  const changeSection = useCallback((section: SectionType): void => {\n    if (isProtectedSection(section.id)) {\n      dispatch(changeSectionTC(section))\n      return\n    }\n    dispatch(setErrorTrueAC(Error.PROTECT_SECTION))\n  }, [])\n\n  const deleteSection = useCallback((sectionId: number): void => {\n    if (isProtectedSection(sectionId)) {\n      dispatch(deleteSectionTC(sectionId))\n      return\n    }\n    dispatch(setErrorTrueAC(Error.PROTECT_SECTION))\n  }, [])\n\n  const sectionTags = sections.map(section => (\n    <Section key={section.id} section={section} deleteSection={deleteSection} />\n  ))\n\n  return (\n    <div className={style.container}>\n      <NavLinkComponent nameButton=\"на главную\" path={Path.MAIN} />\n\n      <div className={style.body}>\n        <div className={style.create}>\n          <h3>Создать новую секцию :</h3>\n          <NewSectionForm mode=\"add\" setSectionData={postSection} />\n        </div>\n\n        <div className={style.create}>\n          <h3>Редактировать имя секции :</h3>\n          <NewSectionForm\n            mode=\"edit\"\n            setSectionData={changeSection}\n            sections={sections}\n          />\n        </div>\n      </div>\n\n      <div className={style.list}>\n        <h3>Существующие секции :</h3>\n        <div className={style.listItems}>{sectionTags}</div>\n      </div>\n    </div>\n  )\n}\nexport default CreateSectionPage\n"],"names":["Section","section","id","name","deleteSection","className","style","disabled","isProtectedSection","onClick","NewSectionForm","setSectionData","mode","sections","useForm","register","handleSubmit","errors","formState","select","htmlFor","defaultValue","map","value","onSubmit","data","Number","maxLength","message","minLength","required","placeholder","Button","type","dispatch","useAppDispatch","useSelector","selectSections","postSection","useCallback","postSectionsTC","changeSection","changeSectionTC","setErrorTrueAC","Error","sectionId","deleteSectionTC","sectionTags","nameButton","path","Path"],"sourceRoot":""}